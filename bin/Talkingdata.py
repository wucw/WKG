#!/usr/bin/python
# -*- coding:UTF-8 -*-
import os
import sys
import json
import time
import logging
import requests
import ConfigParser
import MySQLdb as db
from pylib import ns_ip_proxys

reload(sys)
sys.setdefaultencoding("utf-8")

SELF = os.path.splitext(os.path.basename(sys.argv[0]))[0]
AUTH = 'wuchangwen'
VER = '1.0'

logger = None
config = {}
con = None
cur = None

db_file = '../etc/db.conf'


class Logger:
    def __init__(self, path, clevel=logging.DEBUG, Flevel=logging.DEBUG):
        self.logger = logging.getLogger(path)
        self.logger.setLevel(logging.DEBUG)
        fmt = logging.Formatter(
            '%(asctime)s <%(levelname)-2s><%(name)s:%(process)d:%(threadName)s><%(filename)s:%(lineno)d>%(message)s',
            '%Y-%m-%d %H:%M:%S')
        sh = logging.StreamHandler()
        sh.setFormatter(fmt)
        sh.setLevel(clevel)
        fh = logging.FileHandler(path)
        fh.setFormatter(fmt)
        fh.setLevel(Flevel)
        self.logger.addHandler(sh)
        self.logger.addHandler(fh)

    def debug(self, message):
        self.logger.debug(message)

    def info(self, message):
        self.logger.info(message)

    def war(self, message):
        self.logger.warn(message)

    def error(self, message):
        self.logger.error(message)

    def cri(self, message):
        self.logger.critical(message)


def get_date_active():
    active_dates = ['2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04', '2017-01-05', '2017-01-06', '2017-01-07',
                    '2017-01-08', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-14',
                    '2017-01-15', '2017-01-16', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-21',
                    '2017-01-22', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-28',
                    '2017-01-29', '2017-01-30', '2017-01-31',
                    '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-04', '2017-02-05', '2017-02-06', '2017-02-07',
                    '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-11', '2017-02-12', '2017-02-13', '2017-02-14',
                    '2017-02-15', '2017-02-16', '2017-02-17', '2017-02-18', '2017-02-19', '2017-02-20', '2017-02-21',
                    '2017-02-22', '2017-02-23', '2017-02-24', '2017-02-25', '2017-02-26', '2017-02-27', '2017-02-28',
                    '2017-03-01', '2017-03-02', '2017-03-03', '2017-03-04', '2017-03-05', '2017-03-06', '2017-03-07',
                    '2017-03-08', '2017-03-09', '2017-03-10', '2017-03-11', '2017-03-12', '2017-03-13', '2017-03-14',
                    '2017-03-15', '2017-03-16', '2017-03-17', '2017-03-18', '2017-03-19', '2017-03-20', '2017-03-21',
                    '2017-03-22', '2017-03-23', '2017-03-24', '2017-03-25', '2017-03-26', '2017-03-27', '2017-03-28',
                    '2017-03-29', '2017-03-30', '2017-03-31',
                    '2017-04-01', '2017-04-02', '2017-04-03', '2017-04-04', '2017-04-05', '2017-04-06', '2017-04-07',
                    '2017-04-08', '2017-04-09', '2017-04-10', '2017-04-11', '2017-04-12', '2017-04-13', '2017-04-14',
                    '2017-04-15', '2017-04-16', '2017-04-17', '2017-04-18', '2017-04-19', '2017-04-20', '2017-04-21',
                    '2017-04-22', '2017-04-23', '2017-04-24', '2017-04-25', '2017-04-26', '2017-04-27', '2017-04-28',
                    '2017-04-29', '2017-04-30',
                    '2017-05-01', '2017-05-02', '2017-05-03', '2017-05-04', '2017-05-05', '2017-05-06', '2017-05-07',
                    '2017-05-08', '2017-05-09', '2017-05-10', '2017-05-11', '2017-05-12', '2017-05-13', '2017-05-14',
                    '2017-05-15', '2017-05-16', '2017-05-17', '2017-05-18', '2017-05-19', '2017-05-20', '2017-05-21',
                    '2017-05-22', '2017-05-23', '2017-05-24', '2017-05-25', '2017-05-26', '2017-05-27', '2017-05-28',
                    '2017-05-29', '2017-05-30', '2017-05-31',
                    '2017-06-01', '2017-06-02', '2017-06-03', '2017-06-04', '2017-06-05', '2017-06-06', '2017-06-07',
                    '2017-06-08', '2017-06-09', '2017-06-10', '2017-06-11', '2017-06-12', '2017-06-13', '2017-06-14',
                    '2017-06-15', '2017-06-16', '2017-06-17', '2017-06-18', '2017-06-19', '2016-06-20', '2017-06-21',
                    '2017-06-22', '2017-06-23', '2017-06-24', '2017-06-25', '2017-06-26', '2016-06-27', '2017-06-28',
                    '2017-06-29', '2017-06-30',
                    '2017-07-01', '2017-07-02', '2017-07-03', '2017-07-04', '2017-07-05', '2017-07-06', '2017-07-07',
                    '2017-07-08', '2017-07-09', '2017-07-10', '2017-07-11', '2017-07-12', '2017-07-13', '2017-07-14',
                    '2017-07-15', '2017-07-16', '2017-07-17', '2017-07-18', '2017-07-19', '2017-07-20', '2017-07-21',
                    '2017-07-22', '2017-07-23', '2017-07-24', '2017-07-25', '2017-07-26', '2017-07-27', '2017-07-28',
                    '2017-07-29', '2017-07-30', '2017-07-31',
                    '2017-08-01', '2017-08-02', '2017-08-03', '2017-08-04', '2017-08-05', '2017-08-06', '2017-08-07',
                    '2017-08-08', '2017-08-09', '2017-08-10', '2017-08-11', '2017-08-12', '2017-08-13', '2017-08-14',
                    '2017-08-15', '2017-08-16', '2017-08-17', '2017-08-18', '2017-08-19', '2017-08-20', '2017-08-21',
                    '2017-08-22', '2017-08-23', '2017-08-24', '2017-08-25', '2017-08-26', '2017-08-27', '2017-08-28',
                    '2017-08-29', '2017-08-30', '2017-08-31',
                    '2017-09-01', '2017-09-02', '2017-09-03', '2017-09-04', '2017-09-05', '2017-09-06', '2017-09-07',
                    '2017-09-08', '2017-09-09', '2017-09-10', '2017-09-11', '2017-09-12', '2017-09-13', '2017-09-14',
                    '2017-09-15', '2017-09-16', '2017-09-17', '2017-09-18', '2017-09-19', '2017-09-20', '2017-09-21',
                    '2017-09-22', '2017-09-23', '2017-09-24', '2017-09-25', '2017-09-26', '2017-09-27', '2017-09-28',
                    '2017-09-29', '2017-09-30',
                    '2017-10-01', '2017-10-02', '2017-10-03', '2017-10-04', '2017-10-05', '2017-10-06', '2017-10-07',
                    '2017-10-08', '2017-10-09', '2017-10-10', '2017-10-11', '2017-10-12', '2017-10-13', '2017-10-14',
                    '2017-10-15', '2017-10-16', '2017-10-17', '2017-10-18', '2017-10-19', '2017-10-20', '2017-10-21',
                    '2017-10-22', '2017-10-23', '2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27', '2017-10-28',
                    '2017-10-29', '2017-10-30', '2017-10-31',
                    '2017-11-01', '2017-11-02', '2017-11-03', '2017-11-04', '2017-11-05', '2017-11-06', '2017-11-07',
                    '2017-11-08', '2017-11-09', '2017-11-10', '2017-11-11', '2017-11-12', '2017-11-13', '2017-11-14',
                    '2017-11-15', '2017-11-16', '2017-11-17', '2017-11-18', '2017-11-19', '2017-11-20', '2017-11-21',
                    '2017-11-22', '2017-11-23', '2017-11-24', '2017-11-25', '2017-11-26', '2017-11-27', '2017-11-28',
                    '2017-11-29', '2017-11-30',
                    '2017-12-01', '2017-12-02', '2017-12-03', '2017-12-04', '2017-12-05', '2017-12-06', '2017-12-07',
                    '2017-12-08', '2017-12-09', '2017-12-10', '2017-12-11', '2017-12-12', '2017-12-13', '2017-12-14',
                    '2017-12-15', '2017-12-16', '2017-12-17', '2017-12-18', '2017-12-19', '2017-12-20', '2017-12-21',
                    '2017-12-22', '2017-12-23', '2017-12-24', '2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',
                    '2017-12-29', '2017-12-30', '2017-12-31'
                    ]
    return active_dates


def get_date_rank():
    rank_dates = ['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',
                  '2016-01-08', '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12', '2016-01-13', '2016-01-14',
                  '2016-01-15', '2016-01-16', '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20', '2016-01-21',
                  '2016-01-22', '2016-01-23', '2016-01-24', '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',
                  '2016-01-29', '2016-01-30', '2016-01-31',
                  '2016-02-01', '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05', '2016-02-06', '2016-02-07',
                  '2016-02-08', '2016-02-09', '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13', '2016-02-14',
                  '2016-02-15', '2016-02-16', '2016-02-17', '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',
                  '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25', '2016-02-26', '2016-02-27', '2016-02-28',
                  '2016-02-29',
                  '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04', '2016-03-05', '2016-03-06', '2016-03-07',
                  '2016-03-08', '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12', '2016-03-13', '2016-03-14',
                  '2016-03-15', '2016-03-16', '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20', '2016-03-21',
                  '2016-03-22', '2016-03-23', '2016-03-24', '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',
                  '2016-03-29', '2016-03-30', '2016-03-31',
                  '2016-04-01', '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',
                  '2016-04-08', '2016-04-09', '2016-04-10', '2016-04-11', '2016-04-12', '2016-04-13', '2016-04-14',
                  '2016-04-15', '2016-04-16', '2016-04-17', '2016-04-18', '2016-04-19', '2016-04-20', '2016-04-21',
                  '2016-04-22', '2016-04-23', '2016-04-24', '2016-04-25', '2016-04-26', '2016-04-27', '2016-04-28',
                  '2016-04-29', '2016-04-30',
                  '2016-05-01', '2016-05-02', '2016-05-03', '2016-05-04', '2016-05-05', '2016-05-06', '2016-05-07',
                  '2016-05-08', '2016-05-09', '2016-05-10', '2016-05-11', '2016-05-12', '2016-05-13', '2016-05-14',
                  '2016-05-15', '2016-05-16', '2016-05-17', '2016-05-18', '2016-05-19', '2016-05-20', '2016-05-21',
                  '2016-05-22', '2016-05-23', '2016-05-24', '2016-05-25', '2016-05-26', '2016-05-27', '2016-05-28',
                  '2016-05-29', '2016-05-30', '2016-05-31',
                  '2016-06-01', '2016-06-02', '2016-06-03', '2016-06-04', '2016-06-05', '2016-06-06', '2016-06-07',
                  '2016-06-08', '2016-06-09', '2016-06-10', '2016-06-11', '2016-06-12', '2016-06-13', '2016-06-14',
                  '2016-06-15', '2016-06-16', '2016-06-17', '2016-06-18', '2016-06-19', '2016-06-20', '2016-06-21',
                  '2016-06-22', '2016-06-23', '2016-06-24', '2016-06-25', '2016-06-26', '2016-06-27', '2016-06-28',
                  '2016-06-29', '2016-06-30',
                  '2016-07-01', '2016-07-02', '2016-07-03', '2016-07-04', '2016-07-05', '2016-07-06', '2016-07-07',
                  '2016-07-08', '2016-07-09', '2016-07-10', '2016-07-11', '2016-07-12', '2016-07-13', '2016-07-14',
                  '2016-07-15', '2016-07-16', '2016-07-17', '2016-07-18', '2016-07-19', '2016-07-20', '2016-07-21',
                  '2016-07-22', '2016-07-23', '2016-07-24', '2016-07-25', '2016-07-26', '2016-07-27', '2016-07-28',
                  '2016-07-29', '2016-07-30', '2016-07-31',
                  '2016-08-01', '2016-08-02', '2016-08-03', '2016-08-04', '2016-08-05', '2016-08-06', '2016-08-07',
                  '2016-08-08', '2016-08-09', '2016-08-10', '2016-08-11', '2016-08-12', '2016-08-13', '2016-08-14',
                  '2016-08-15', '2016-08-16', '2016-08-17', '2016-08-18', '2016-08-19', '2016-08-20', '2016-08-21',
                  '2016-08-22', '2016-08-23', '2016-08-24', '2016-08-25', '2016-08-26', '2016-08-27', '2016-08-28',
                  '2016-08-29', '2016-08-30', '2016-08-31',
                  '2016-09-01', '2016-09-02', '2016-09-03', '2016-09-04', '2016-09-05', '2016-09-06', '2016-09-07',
                  '2016-09-08', '2016-09-09', '2016-09-10', '2016-09-11', '2016-09-12', '2016-09-13', '2016-09-14',
                  '2016-09-15', '2016-09-16', '2016-09-17', '2016-09-18', '2016-09-19', '2016-09-20', '2016-09-21',
                  '2016-09-22', '2016-09-23', '2016-09-24', '2016-09-25', '2016-09-26', '2016-09-27', '2016-09-28',
                  '2016-09-29', '2016-09-30',
                  '2016-10-01', '2016-10-02', '2016-10-03', '2016-10-04', '2016-10-05', '2016-10-06', '2016-10-07',
                  '2016-10-08', '2016-10-09', '2016-10-10', '2016-10-11', '2016-10-12', '2016-10-13', '2016-10-14',
                  '2016-10-15', '2016-10-16', '2016-10-17', '2016-10-18', '2016-10-19', '2016-10-20', '2016-10-21',
                  '2016-10-22', '2016-10-23', '2016-10-24', '2016-10-25', '2016-10-26', '2016-10-27', '2016-10-28',
                  '2016-10-29', '2016-10-30', '2016-10-31',
                  '2016-11-01', '2016-11-02', '2016-11-03', '2016-11-04', '2016-11-05', '2016-11-06', '2016-11-07',
                  '2016-11-08', '2016-11-09', '2016-11-10', '2016-11-11', '2016-11-12', '2016-11-13', '2016-11-14',
                  '2016-11-15', '2016-11-16', '2016-11-17', '2016-11-18', '2016-11-19', '2016-11-20', '2016-11-21',
                  '2016-11-22', '2016-11-23', '2016-11-24', '2016-11-25', '2016-11-26', '2016-11-27', '2016-11-28',
                  '2016-11-29', '2016-11-30',
                  '2016-12-01', '2016-12-02', '2016-12-03', '2016-12-04', '2016-12-05', '2016-12-06', '2016-12-07',
                  '2016-12-08', '2016-12-09', '2016-12-10', '2016-12-11', '2016-12-12', '2016-12-13', '2016-12-14',
                  '2016-12-15', '2016-12-16', '2016-12-17', '2016-12-18', '2016-12-19', '2016-12-20', '2016-12-21',
                  '2016-12-22', '2016-12-23', '2016-12-24', '2016-12-25', '2016-12-26', '2016-12-27', '2016-12-28',
                  '2016-12-29', '2016-12-30', '2016-12-31',
                  '2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04', '2017-01-05', '2017-01-06', '2017-01-07',
                  '2017-01-08', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-14',
                  '2017-01-15', '2017-01-16', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-21',
                  '2017-01-22', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-28',
                  '2017-01-29', '2017-01-30', '2017-01-31',
                  '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-04', '2017-02-05', '2017-02-06', '2017-02-07',
                  '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-11', '2017-02-12', '2017-02-13', '2017-02-14',
                  '2017-02-15', '2017-02-16', '2017-02-17', '2017-02-18', '2017-02-19', '2017-02-20', '2017-02-21',
                  '2017-02-22', '2017-02-23', '2017-02-24', '2017-02-25', '2017-02-26', '2017-02-27', '2017-02-28',
                  '2017-03-01', '2017-03-02', '2017-03-03', '2017-03-04', '2017-03-05', '2017-03-06', '2017-03-07',
                  '2017-03-08', '2017-03-09', '2017-03-10', '2017-03-11', '2017-03-12', '2017-03-13', '2017-03-14',
                  '2017-03-15', '2017-03-16', '2017-03-17', '2017-03-18', '2017-03-19', '2017-03-20', '2017-03-21',
                  '2017-03-22', '2017-03-23', '2017-03-24', '2017-03-25', '2017-03-26', '2017-03-27', '2017-03-28',
                  '2017-03-29', '2017-03-30', '2017-03-31',
                  '2017-04-01', '2017-04-02', '2017-04-03', '2017-04-04', '2017-04-05', '2017-04-06', '2017-04-07',
                  '2017-04-08', '2017-04-09', '2017-04-10', '2017-04-11', '2017-04-12', '2017-04-13', '2017-04-14',
                  '2017-04-15', '2017-04-16', '2017-04-17', '2017-04-18', '2017-04-19', '2017-04-20', '2017-04-21',
                  '2017-04-22', '2017-04-23', '2017-04-24', '2017-04-25', '2017-04-26', '2017-04-27', '2017-04-28',
                  '2017-04-29', '2017-04-30',
                  '2017-05-01', '2017-05-02', '2017-05-03', '2017-05-04', '2017-05-05', '2017-05-06', '2017-05-07',
                  '2017-05-08', '2017-05-09', '2017-05-10', '2017-05-11', '2017-05-12', '2017-05-13', '2017-05-14',
                  '2017-05-15', '2017-05-16', '2017-05-17', '2017-05-18', '2017-05-19', '2017-05-20', '2017-05-21',
                  '2017-05-22', '2017-05-23', '2017-05-24', '2017-05-25', '2017-05-26', '2017-05-27', '2017-05-28',
                  '2017-05-29', '2017-05-30', '2017-05-31',
                  '2017-06-01', '2017-06-02', '2017-06-03', '2017-06-04', '2017-06-05', '2017-06-06', '2017-06-07',
                  '2017-06-08', '2017-06-09', '2017-06-10', '2017-06-11', '2017-06-12', '2017-06-13', '2017-06-14',
                  '2017-06-15', '2017-06-16', '2017-06-17', '2017-06-18', '2017-06-19', '2016-06-20', '2017-06-21',
                  '2017-06-22', '2017-06-23', '2017-06-24', '2017-06-25', '2017-06-26', '2016-06-27', '2017-06-28',
                  '2017-06-29', '2017-06-30',
                  '2017-07-01', '2017-07-02', '2017-07-03', '2017-07-04', '2017-07-05', '2017-07-06', '2017-07-07',
                  '2017-07-08', '2017-07-09', '2017-07-10', '2017-07-11', '2017-07-12', '2017-07-13', '2017-07-14',
                  '2017-07-15', '2017-07-16', '2017-07-17', '2017-07-18', '2017-07-19', '2017-07-20', '2017-07-21',
                  '2017-07-22', '2017-07-23', '2017-07-24', '2017-07-25', '2017-07-26', '2017-07-27', '2017-07-28',
                  '2017-07-29', '2017-07-30', '2017-07-31',
                  '2017-08-01', '2017-08-02', '2017-08-03', '2017-08-04', '2017-08-05', '2017-08-06', '2017-08-07',
                  '2017-08-08', '2017-08-09', '2017-08-10', '2017-08-11', '2017-08-12', '2017-08-13', '2017-08-14',
                  '2017-08-15', '2017-08-16', '2017-08-17', '2017-08-18', '2017-08-19', '2017-08-20', '2017-08-21',
                  '2017-08-22', '2017-08-23', '2017-08-24', '2017-08-25', '2017-08-26', '2017-08-27', '2017-08-28',
                  '2017-08-29', '2017-08-30', '2017-08-31',
                  '2017-09-01', '2017-09-02', '2017-09-03', '2017-09-04', '2017-09-05', '2017-09-06', '2017-09-07',
                  '2017-09-08', '2017-09-09', '2017-09-10', '2017-09-11', '2017-09-12', '2017-09-13', '2017-09-14',
                  '2017-09-15', '2017-09-16', '2017-09-17', '2017-09-18', '2017-09-19', '2017-09-20', '2017-09-21',
                  '2017-09-22', '2017-09-23', '2017-09-24', '2017-09-25', '2017-09-26', '2017-09-27', '2017-09-28',
                  '2017-09-29', '2017-09-30',
                  '2017-10-01', '2017-10-02', '2017-10-03', '2017-10-04', '2017-10-05', '2017-10-06', '2017-10-07',
                  '2017-10-08', '2017-10-09', '2017-10-10', '2017-10-11', '2017-10-12', '2017-10-13', '2017-10-14',
                  '2017-10-15', '2017-10-16', '2017-10-17', '2017-10-18', '2017-10-19', '2017-10-20', '2017-10-21',
                  '2017-10-22', '2017-10-23', '2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27', '2017-10-28',
                  '2017-10-29', '2017-10-30', '2017-10-31',
                  '2017-11-01', '2017-11-02', '2017-11-03', '2017-11-04', '2017-11-05', '2017-11-06', '2017-11-07',
                  '2017-11-08', '2017-11-09', '2017-11-10', '2017-11-11', '2017-11-12', '2017-11-13', '2017-11-14',
                  '2017-11-15', '2017-11-16', '2017-11-17', '2017-11-18', '2017-11-19', '2017-11-20', '2017-11-21',
                  '2017-11-22', '2017-11-23', '2017-11-24', '2017-11-25', '2017-11-26', '2017-11-27', '2017-11-28',
                  '2017-11-29', '2017-11-30',
                  '2017-12-01', '2017-12-02', '2017-12-03', '2017-12-04', '2017-12-05', '2017-12-06', '2017-12-07',
                  '2017-12-08', '2017-12-09', '2017-12-10', '2017-12-11', '2017-12-12', '2017-12-13', '2017-12-14',
                  '2017-12-15', '2017-12-16', '2017-12-17', '2017-12-18', '2017-12-19', '2017-12-20', '2017-12-21',
                  '2017-12-22', '2017-12-23', '2017-12-24', '2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',
                  '2017-12-29', '2017-12-30', '2017-12-31',
                  '2018-01-01', '2018-01-02', '2018-01-03', '2018-01-04', '2018-01-05', '2018-01-06', '2018-01-07',
                  '2018-01-08', '2018-01-09', '2018-01-10', '2018-01-11', '2018-01-12', '2018-01-13', '2018-01-14',
                  '2018-01-15', '2018-01-16', '2018-01-17', '2018-01-18', '2018-01-19', '2018-01-20', '2018-01-21',
                  '2018-01-22', '2018-01-23', '2018-01-24', '2018-01-25', '2018-01-26', '2018-01-27', '2018-01-28',
                  '2018-01-29', '2018-01-30', '2018-01-31',
                  '2018-02-01', '2018-02-02', '2018-02-03', '2018-02-04', '2018-02-05', '2018-02-06', '2018-02-07',
                  '2018-02-08', '2018-02-09', '2018-02-10', '2017-02-11', '2018-02-12', '2018-02-13', '2018-02-14',
                  '2018-02-15', '2018-02-16', '2018-02-17', '2017-02-18', '2018-02-19', '2018-02-20', '2018-02-21',
                  '2018-02-22', '2018-02-23', '2018-02-24', '2017-02-25', '2018-02-26', '2018-02-27', '2018-02-28',
                  '2018-03-01', '2018-03-02', '2018-03-03', '2017-03-04', '2018-03-05', '2018-03-06', '2018-03-07',
                  '2018-03-08', '2018-03-09', '2018-03-10', '2017-03-11', '2018-03-12', '2018-03-13', '2018-03-14',
                  '2018-03-15', '2018-03-16', '2018-03-17', '2017-03-18', '2017-03-19', '2018-03-20', '2018-03-21',
                  '2018-03-22', '2018-03-23', '2018-03-24', '2017-03-25', '2018-03-26', '2018-03-27', '2018-03-28',
                  '2018-03-29', '2018-03-30', '2018-03-31'
                  ]
    return rank_dates


def _init_conf():
    global config
    config = {}
    cf = ConfigParser.ConfigParser()
    try:
        cf.read(db_file)
        # str config
        for opt in ['db_host', 'db_user', 'db_pass', 'db_dbname', 'charset', 'rank', 'climb']:
            config[opt] = cf.get(SELF, opt)
            logger.info('%s.%s [%s]' % (SELF, opt, config[opt]))
        # int config
        for opt in ['db_port']:
            config[opt] = cf.getint(SELF, opt)
            logger.info('%s.%s [%s]' % (SELF, opt, config[opt]))
    except Exception as e:
        logger.error('cfg [%s] get FAIL [%s]' % (db_file, e))


def getdata_rank(url, proxies):
    header = {
        'Accept': 'application / json, text / javascript, * / *; q = 0.01',
        'Accept - Encoding': 'gzip, deflate',
        'Accept - Language': 'zh - CN, zh;q = 0.9',
        'Connection': 'keep - alive',
        'Content - Type': 'application / json',
        'Host': 'mi.talkingdata.com',
        'Referer': 'http: // mi.talkingdata.com / appstore - rank.html',
        'User - Agent': 'Mozilla / 5.0(Windows NT 10.0;WOW64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 62.0.3202.89 Safari / 537.36 X - Requested - With:XMLHttpRequest'
    }
    response = requests.get(url=url, headers=header, proxies=proxies)
    datastr = response.content
    json_data = json.loads(datastr)
    data_dict_lst = []
    date = url.split('&')[-5]
    try:
        for info_lst in json_data['rows']:
            res = {}
            res['appid'] = info_lst['appid']
            res['name'] = info_lst['appinfo']['name']
            res['rank'] = info_lst['rank']
            try:
                res['rank_change'] = info_lst['rank_change']
            except Exception as e:
                res['rank_change'] = -9999
            res['dates'] = date.split('=')[-1]
            data_dict_lst.append(res)
        logger.info('Get datas from the url of %s ' % url)
    except Exception as e:
        logger.error('This is an error,The detailed information is [%s]' % e)
    return data_dict_lst


def getdata_active(url, proxies):
    header = {
        'Accept': 'application / json, text / javascript, * / *; q = 0.01',
        'Accept - Encoding': 'gzip, deflate',
        'Accept - Language': 'zh - CN, zh;q = 0.9',
        'Connection': 'keep - alive',
        'Content - Type': 'application / json',
        'Host': 'mi.talkingdata.com',
        'Referer': 'http: // mi.talkingdata.com / appstore - rank.html',
        'User - Agent': 'Mozilla / 5.0(Windows NT 10.0;WOW64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 62.0.3202.89 Safari / 537.36 X - Requested - With:XMLHttpRequest'
    }

    response = requests.get(url=url, headers=header, proxies=proxies)
    datastr = response.content
    json_data = json.loads(datastr)
    data_dict_lst = []
    date = url.split('&')[-5]
    try:
        for info_lst in json_data:
            res = {}
            res['activeChangeRate'] = info_lst['activeChangeRate']
            res['activeRate'] = info_lst['activeRate']
            res['appName'] = info_lst['appName']
            res['coverageChangeRate'] = info_lst['coverageChangeRate']
            res['coverageRate'] = info_lst['coverageRate']
            res['ranking'] = info_lst['ranking']
            res['rankingChange'] = info_lst['rankingChange']
            res['dates'] = date.split('=')[-1]
            data_dict_lst.append(res)
        logger.info('Get datas from the url of %s ' % url)
    except Exception as e:
        logger.error('This is an error,The detailed information is [%s]' % e)
    return data_dict_lst


def save_to_db_active(datadict):
    global con
    global cur
    try:
        con = db.connect(host=config['db_host'], user=config['db_user'], passwd=config['db_pass'],
                         db=config['db_dbname'],
                         port=config['db_port'], charset=config['charset'])
        logger.info('Connection the database of %s is successful.' % config['db_dbname'])
    except Exception as e:
        logger.error('Connection the database of %s is Fail.This is an error,The detailed information is [%s]' % (
            config['db_dbname'], e))
    cur = con.cursor()
    try:
        if datadict is not None:
            for res in datadict:
                logger.info('Connection the table of climbdata is successful...')
                activeChangeRate = res['activeChangeRate']
                activeRate = res['activeRate']
                appName = res['appName']
                coverageChangeRate = res['coverageChangeRate']
                coverageRate = res['coverageRate']
                ranking = res['ranking']
                rankingChange = res['rankingChange']
                dates = res['dates']
                sql = "INSERT INTO climbdata VALUES (%s,%s,%s,%s,%s,%s,%s,%s)"
                cur.execute(sql, (
                    appName, ranking, rankingChange, activeRate, activeChangeRate, coverageRate, coverageChangeRate,
                    dates))
                con.commit()
                logger.info('Insert [%s] to the table of climbdata is successful' % appName)
        else:
            logger.info('The datas is null... ...')
    except Exception as e:
        con.rollback()
        logger.error('This is an error,The detailed information is [%s]' % e)
    finally:
        con.close()


def save_to_db_rank(datadict):
    global con
    global cur
    try:
        con = db.connect(host=config['db_host'], user=config['db_user'], passwd=config['db_pass'],
                         db=config['db_dbname'],
                         port=config['db_port'], charset=config['charset'])
        logger.info('Connection the database of %s is successful.' % config['db_dbname'])
    except Exception as e:
        logger.error('Connection the database of %s is Fail.This is an error,The detailed information is [%s]' % (
            config['db_dbname'], e))
    cur = con.cursor()
    try:
        if datadict is not None:
            for res in datadict:
                logger.info('Connection the table of rankdata is successful...')
                appid = str(res['appid'])
                name = res['name']
                rank = str(res['rank'])
                rank_change = str(res['rank_change'])
                dates = res['dates']
                sql = "INSERT INTO rankdata VALUES (%s,%s,%s,%s,%s)"
                cur.execute(sql, (appid, name, rank, rank_change, dates))
                con.commit()
                logger.info('Insert [%s] to the table of climbdata is successful' % appid)
        else:
            logger.info('The datas is null... ...')
    except Exception as e:
        con.rollback()
        logger.error('This is an error,The detailed information is [%s]' % e)
    finally:
        con.close()


def save(datadict, datas_type):
    if datas_type == config['rank']:
        save_to_db_rank(datadict)
    if datas_type == config['active']:
        save_to_db_active(datadict)


def task(url, proxies):
    logger.info('Start to get the data from the url of %s ' % url)
    datas_types = url.split('/')[-1]
    datas_type = datas_types.split('.')[0]
    if datas_type == 'rank':
        datadict = getdata_rank(url, proxies)
        save(datadict, datas_type)
    else:
        datadict = getdata_active(url, proxies)
        save(datadict, datas_type)


def log_file(SELF):
    path = '../log/'
    current = time.strftime("%Y%m%d", time.localtime(time.time()))
    newdir = os.path.join(path, current)
    if not os.access(newdir, os.X_OK):
        os.mkdir(newdir)
    filename = SELF + '.log'
    newfile = newdir + '/' + filename
    return newfile


def main():
    global logger
    global config
    log_files = log_file(SELF)
    logger = Logger(log_files, logging.INFO, logging.INFO)
    logger.info("START PROCESS [%s], auth:[%s], ver:[%s]" % (SELF, AUTH, VER))
    _init_conf()
    try:
        urls = []
        proxies = ns_ip_proxys.dailiIP()
        for url_data in get_date_rank():
            url1str = 'http://mi.talkingdata.com/appstore/rank.json?date={}&cat=6014&tab=1&page='
            url = url1str.format(url_data)
            for page in range(0, 6):
                url_str = url + str(page) + '&pagesize=30'
                urls.append(url_str)

        for url_data in get_date_active():
            url2str = 'http://mi.talkingdata.com/rank/active.json?date={}&typeId=200000&dateType=m&rankingStart='
            url = url2str.format(url_data)
            for page in range(0, 6):
                url_str = url + str(page) + '&rankingSize=30'
                urls.append(url_str)

        for url in urls:
            logger.info('Get the url is %s ' % url)
            task(url, proxies)
            time.sleep(2)
    except Exception as e:
        logger.error('This is an error,The detailed information is [%s]' % e)
    logger.info('END PROCESS [%s], auth:[%s], ver:[%s]' % (SELF, AUTH, VER))


if __name__ == '__main__':
    main()
